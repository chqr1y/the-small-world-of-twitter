{"version":3,"sources":["Markers.js","DrawMap.js","LegendMap.js","DataMap.js","Map.js","index.js"],"names":["Markers","this","props","markers","map","index","name","latitude","longitude","key","coordinates","onMouseEnter","setTooltipContent","onMouseLeave","r","fill","stroke","strokeWidth","React","Component","DrawMap","state","tooltip","bind","value","setState","data-tip","geography","geoUrl","geographies","geo","country","defaultColor","properties","TW_WOEID","selectedColor","rsmKey","NAME","onClick","handleClick","style","default","selectedCountry","outline","pressed","hover","LegendMap","id","displayTowns","handleDisplayTowns","DataMap","place","isTwitterCountry","woeid","Map","mapToolTip","handleSelectCountry","filter","marker","parentid","App","error","isLoaded","twitterLocations","fetch","then","res","json","data","loc","placeType","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a53c1da7.chunk.js","sourcesContent":["import React from \"react\";\nimport { Marker } from \"react-simple-maps\";\n\nclass Markers extends React.Component {\n  render() {\n    return (\n      this.props.markers.map(\n        ({name, latitude, longitude}, index) => (\n          <Marker\n            key={index}\n            coordinates={[longitude, latitude]}\n            onMouseEnter={() => {\n              this.props.setTooltipContent(name);\n            }}\n            onMouseLeave={() => {\n              this.props.setTooltipContent(\"\");\n            }}\n          >\n            <circle r={3} fill=\"#F00\" stroke=\"#fff\" strokeWidth={0.5} />\n          </Marker>\n        )\n      )\n    );\n  }\n}\n\nexport default Markers;\n","import React from \"react\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport Markers from './Markers';\n\nclass DrawMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tooltip: \"\",\n    };\n    this.setTooltipContent = this.setTooltipContent.bind(this);\n  }\n  setTooltipContent(value) {\n    this.setState({tooltip: value});\n  }\n  render() {\n    return (\n      <div>\n        <ComposableMap data-tip=\"\">\n          <ZoomableGroup>\n            <Geographies\n              geography={this.props.geoUrl}>\n              {({ geographies }) =>\n                geographies.map((geo, index) => {\n                  const country = {\n                    defaultColor : (geo.properties.TW_WOEID !== -1\n                      ? \"#1DA1F2\"\n                      : \"#BBBBBB\"),\n                    selectedColor : \"#0000FF\",\n                  }\n                  return(\n                    <Geography\n                      key={geo.rsmKey}\n                      geography={geo}\n                      fill={country.defaultColor}\n                      onMouseEnter={() => {\n                        const { NAME } = geo.properties;\n                        this.setState({tooltip: NAME});\n                      }}\n                      onMouseLeave={() => {\n                        this.setState({tooltip: \"\"});\n                      }}\n                      onClick={() => {\n                        this.props.handleClick(geo.properties, index);\n                      }}\n                      style={{\n                        default: {\n                          fill: this.props.selectedCountry.index === index\n                                ? country.selectedColor\n                                : country.defaultColor,\n                          outline: \"none\"\n                        },\n                        pressed: {\n                          outline: \"none\"\n                        },\n                        hover: {\n                          fill: \"#F53\",\n                          outline: \"none\"\n                        }\n                      }} />\n                    );\n                  })\n              }\n            </Geographies>\n            <Markers\n              markers={this.props.markers}\n              setTooltipContent={this.setTooltipContent}\n            />\n          </ZoomableGroup>\n        </ComposableMap>\n        <ReactTooltip>{this.state.tooltip}</ReactTooltip>\n      </div>\n    );\n  }\n}\n\nexport default DrawMap;\n","import React from 'react';\n\nclass LegendMap extends React.Component {\n  render() {\n    return (\n      <div>\n        <div>\n          <span>\n            Legend :\n          </span>\n          <button\n            id=\"button-display-places\"\n            style={{\n              \"textDecoration\": this.props.displayTowns ? \"none\" : \"line-through\"\n            }}\n            onClick={() => this.props.handleDisplayTowns()}\n          >\n              Display places\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LegendMap;\n","import React from 'react';\n\nclass DataMap extends React.Component {\n  render() {\n    return (\n      <div>\n        <div>\n          <span>Name : {this.props.place.name}</span>\n        </div>\n        <div>\n          <span>Twitter Data Available ? : {this.props.place.isTwitterCountry ? \"YES\" : \"NO\"}</span>\n        </div>\n        <div>\n          <span>Twitter woeid : {this.props.place.woeid}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DataMap;\n","import React from \"react\";\n\nimport DrawMap from './DrawMap';\nimport LegendMap from './LegendMap';\nimport DataMap from './DataMap';\n\n\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCountry : {\n        isTwitterCountry: false,\n        index: null,\n        woeid: null,\n        name: null,\n      },\n      displayTowns: true,\n      mapToolTip: \"\",\n    };\n    this.handleSelectCountry = this.handleSelectCountry.bind(this);\n    this.handleDisplayTowns = this.handleDisplayTowns.bind(this);\n  }\n  handleSelectCountry(properties, index) {\n    if (this.state.selectedCountry.index === index) {\n      this.setState({\n        selectedCountry : {\n          isTwitterCountry: null,\n          index:null,\n          woeid:null,\n          name: null,\n        },\n      });\n    }\n    else {\n      this.setState({\n        selectedCountry : {\n          isTwitterCountry: (properties.TW_WOEID !== -1),\n          index:index,\n          woeid:properties.TW_WOEID,\n          name: properties.NAME,\n        },\n      });\n    }\n  }\n\n  handleDisplayTowns() {\n    this.setState({\n      displayTowns: !(this.state.displayTowns),\n    });\n  }\n  render() {\n    const markers = (() => {\n      if (this.state.displayTowns === false) {\n        return [];\n      }\n      else if (this.state.selectedCountry.index === null) {\n        return this.props.markers;\n      }\n      else {\n        return this.props.markers.filter(marker =>\n            marker.parentid === this.state.selectedCountry.woeid\n        );\n      }\n    })();\n    const style = {\n      \"borderStyle\": \"solid\",\n    };\n    return (\n      <div>\n        <div style={style}>\n          <DrawMap\n            geoUrl={this.props.geoUrl}\n            selectedCountry={this.state.selectedCountry}\n            handleClick={this.handleSelectCountry}\n            markers={markers}\n          />\n        </div>\n        <div style={style}>\n          <LegendMap\n            displayTowns={this.state.displayTowns}\n            handleDisplayTowns={this.handleDisplayTowns}\n          />\n        </div>\n        <div style={style}>\n          <DataMap\n            place={this.state.selectedCountry}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Map from './Map';\n\nconst geoUrl = \"https://raw.githubusercontent.com/chqr1y/twitter-locations-maps/master/ne_50m_admin_0_countries_and_twitter_woeid.json\"\nconst twitterLocationsUrl = \"https://raw.githubusercontent.com/chqr1y/the-small-world-of-twitter/master/data/twitter_available_locations.json\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      twitterLocations: [],\n    };\n  }\n  componentDidMount() {\n    fetch(twitterLocationsUrl)\n      .then(res => res.json())\n      .then(\n        (data) => {\n          this.setState({\n            isLoaded: true,\n            twitterLocations: data.filter(loc => loc.placeType.name === 'Town')\n          });\n        },(error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  }\n  render() {\n    return (\n      <div\n        style={{\n              \"width\":\"90%\",\n              \"maxWidth\":\"1200px\",\n              \"margin\":\"auto\",\n              \"borderStyle\":\"solid\",\n        }}\n      >\n        <Map\n          geoUrl={geoUrl}\n          markers={this.state.twitterLocations}\n        />\n      </div>\n    );\n  }\n}\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}